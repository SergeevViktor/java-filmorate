CREATE TABLE IF NOT EXISTS Users (
    user_id  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR(100) NOT NULL,
    login    VARCHAR(100) NOT NULL,
    name     VARCHAR(50)  NOT NULL,
    birthday DATE         NOT NULL);

CREATE TABLE IF NOT EXISTS Friendship (
    user_id   INTEGER,
    friend_id INTEGER,
    status    BOOLEAN,
    PRIMARY KEY (user_id, friend_id),
    FOREIGN KEY (user_id)   REFERENCES Users (user_id) ON DELETE CASCADE,
    FOREIGN KEY (friend_id) REFERENCES Users (user_id) ON DELETE CASCADE );

CREATE TABLE IF NOT EXISTS RatingMpa (
    raiting_id  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        VARCHAR(50) );

CREATE TABLE IF NOT EXISTS Genre (
    genre_id  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name      VARCHAR(100) NOT NULL );

CREATE TABLE IF NOT EXISTS Films (
    film_id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name          VARCHAR(50) NOT NULL,
    description   VARCHAR(250),
    release_date  DATE        NOT NULL,
    duration      INTEGER     NOT NULL,
    raiting_id    INTEGER     NOT NULL,
    FOREIGN KEY (raiting_id) REFERENCES RatingMpa (raiting_id) ON DELETE CASCADE );

CREATE TABLE IF NOT EXISTS FilmGenre (
    film_id  INTEGER,
    genre_id INTEGER,
    PRIMARY KEY (film_id, genre_id),
    FOREIGN KEY (film_id)  REFERENCES Films (film_id)  ON DELETE CASCADE,
    FOREIGN KEY (genre_id) REFERENCES Genre (genre_id) ON DELETE CASCADE );

CREATE TABLE IF NOT EXISTS Likes (
    film_id INTEGER,
    user_id INTEGER,
    PRIMARY KEY (film_id, user_id),
    FOREIGN KEY (film_id) REFERENCES Films (film_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES Users (user_id) ON DELETE CASCADE );